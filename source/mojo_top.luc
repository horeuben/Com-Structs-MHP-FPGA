module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output a,               // All these are inputs, c is carry
    output b,               // Pins are a = 41, b = 35, c = 33
    output c,
    input sum,              // sum is pin 50 and carry is pin 40
    input carry,
    output pwr              // power for stripboard
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
       myfsm mf;
    }
  }
  seven_seg seg;
 
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    pwr = 1;
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led = 3x{{8h00}};    // turn LEDs off
    mf.dipsw = io_dip[0][0];// dip switch to toggle manual/automatic testing
    io_led[0] = mf.toled;   // set led array to take values from fsm
    
    a = mf.toled[0];        // output to a, b, c
    b = mf.toled[1];
    c = mf.toled[2];
    
    seg.char = carry + carry + sum; // add carry and sum together to output a number in 7 segment led.
   // seg.char = mf.toled[1] + mf.toled[2] + mf.toled[0]; // for testing
    io_seg = ~seg.segs;     // connect segments to counter
    io_sel = ~4h1;          // first digit only
  }
}